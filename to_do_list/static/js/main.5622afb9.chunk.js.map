{"version":3,"sources":["serviceWorker.js","storage/types.js","storage/actions.js","components/new/new.js","components/list/list.js","storage/config.js","components/App.js","storage/initial.js","storage/reducer.js","index.js"],"names":["Boolean","window","location","hostname","match","types","changeOrder","type","addTask","task","payload","updateTask","id","removeTask","loadTasks","tasks","actions","state","order","taskList","dispatch","bindActionCreators","NewUser","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeTitle","event","setState","title","currentTarget","value","onChangeText","text","onAccept","_this$state","accept","preventDefault","onCancel","cancel","handleKeyPress","_this$state2","key","complited","_this$state3","react_default","a","createElement","className","placeholder","aria-label","aria-describedby","onChange","onKeyPress","disabled","onClick","Component","List","onCheckChange","item","update","objectSpread","checked","onRemove","remove","onEdit","editId","_this$props","items","length","sort","itemA","itemB","v","bind","map","role","aria-hidden","config","STORAGE_KEY","App","toggleOrder","show","showNewUser","savedObject","localStorage","getItem","JSON","parse","components_new_new","components_list_list","connect","initialState","getIndex","findIndex","updateStorage","data","setItem","stringify","rootReducer","action","index","btoa","Date","valueOf","list","toConsumableArray","concat","_action$payload","slice","store","createStore","ReactDOM","render","es","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5622afb9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default {\n    ACTION_CHANGE_ORDER: 'ACTION_CHANGE_ORDER',\n    ACTION_ADD_TASK: 'ACTION_ADD_TASK',\n    ACTION_UPDATE_TASK: 'ACTION_UPDATE_TASK',\n    ACTION_REMOVE_TASK: 'ACTION_REMOVE_TASK',\n    ACTION_LOAD_TASKS: 'ACTION_LOAD_TASKS'\n};","import { bindActionCreators } from 'redux';\n\nimport types from './types'\n\nconst changeOrder = () => {\n        return {\n            type: types.ACTION_CHANGE_ORDER\n        };\n    },\n    addTask = (task) => {\n        return {\n            type: types.ACTION_ADD_TASK,\n            payload: task\n        };\n    },\n    updateTask = (id, task) => {\n        return {\n            type: types.ACTION_UPDATE_TASK,\n            payload: { id, task }\n        };\n    },\n    removeTask = (id) => {\n        return {\n            type: types.ACTION_REMOVE_TASK,\n            payload: id\n        };\n    },\n    loadTasks = (tasks) => {\n        return {\n            type: types.ACTION_LOAD_TASKS,\n            payload: tasks\n        };\n    };\n\nconst stateToProps = (state) => {\n        let { order, taskList } = state;\n        return { order, taskList };\n    },\n    actionsToProps = (dispatch) => {\n        return {\n            changeOrder: bindActionCreators(changeOrder, dispatch),\n            addTask: bindActionCreators(addTask, dispatch),\n            updateTask: bindActionCreators(updateTask, dispatch),\n            removeTask: bindActionCreators(removeTask, dispatch),\n            loadTasks: bindActionCreators(loadTasks, dispatch)\n        };\n    };\n\n\nexport default {\n    loadTasks, changeOrder, addTask, updateTask, removeTask, stateToProps, actionsToProps\n};","import React, { Component } from 'react';\n\nimport './new.css';\n\nclass NewUser extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { \n            title: 'New title',\n            text: '',\n            complited: false\n        };\n    }\n    onChangeTitle = (event) => {\n        this.setState({ title: event.currentTarget.value });\n    }\n    onChangeText = (event) => {\n        this.setState({ text: event.currentTarget.value });\n    }\n    onAccept = (event) => {\n        const { title, text } = this.state,\n            { accept } = this.props;\n\n        event.preventDefault();\n\n        accept({ title, text });\n    }\n    onCancel = (event) => {\n        const { cancel } = this.props;\n\n        event.preventDefault();\n\n        cancel();\n    }\n    handleKeyPress = (event) => {\n        const { title, text } = this.state,\n            { accept } = this.props;\n\n        if(event.key === 'Enter' && !!title){\n            accept({ title, text });\n        }\n    }\n    render() {\n        const { title, text } = this.state,\n            { onChangeTitle, handleKeyPress, onChangeText, onAccept, onCancel } = this;\n\n        return (\n            <div className=\"new-user\">\n                <div className=\"input-group mb-3\">\n                <div className=\"input-group-prepend\">\n                    <span className=\"input-group-text\" id=\"new-title\">Task title</span>\n                </div>\n                <input type=\"text\" \n                    className=\"form-control\" \n                    placeholder=\"Title\" \n                    aria-label=\"Title\" \n                    aria-describedby=\"new-title\" \n                    onChange={onChangeTitle}\n                    onKeyPress={handleKeyPress}\n                    value={title} />\n                </div>\n                <div className=\"input-group mb-3\">\n                <div className=\"input-group-prepend\">\n                    <span className=\"input-group-text\" id=\"new-task\">Task text</span>\n                </div>\n                <input type=\"text\" \n                    className=\"form-control\" \n                    placeholder=\"Task\" \n                    aria-label=\"Task\" \n                    aria-describedby=\"new-task\" \n                    onChange={onChangeText}\n                    onKeyPress={handleKeyPress}\n                    value={text}/>\n                </div>\n                <div className=\"new-user-btn-box\">\n                    <button type=\"button\" \n                        className=\"btn btn-outline-success\" \n                        title=\"Add task\"\n                        disabled={!title}\n                        onClick={onAccept}>Add task</button>\n                    <button type=\"button\" \n                        className=\"btn btn-outline-secondary\" \n                        title=\"Cancel\"\n                        onClick={onCancel}>Cancel</button>\n                </div>\n            </div>            \n        );\n    }\n}\n\nexport default NewUser;\n","import React, { Component } from 'react';\n\nimport './list.css';\n\nfunction sort(order, itemA, itemB) {\n    let v = itemA.title > itemB.title ? 1 : (itemA.title === itemB.title ? 0 : -1);\n    return order === 'asc' ? v : v * -1;\n}\n\nclass List extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editId: null,\n            text: ''\n        };\n    }\n    onCheckChange = (item, event) => {\n        const { update } = this.props\n        event.preventDefault();\n        update({...item, complited: event.currentTarget.checked});\n    }\n    onRemove = (item) => {\n        const { remove } = this.props\n        remove(item);\n    }\n    onEdit = (item, event) => {\n        event.preventDefault();\n        this.setState({\n            editId: item.id,\n            text: item.text\n        });\n    }\n    onChangeText = (event) => {\n        this.setState({ text: event.currentTarget.value });\n    }\n    onAccept = (item, event) => {\n        const { update } = this.props,\n            { text } = this.state;\n        if (event) { event.preventDefault(); }\n        update({ ...item, text });\n        this.onCancel();\n    }\n    onCancel = (event) => {\n        if (event) { event.preventDefault(); }\n        this.setState({\n            editId: null,\n            text: ''\n        });\n    }\n    handleKeyPress = (item, event) => {\n        const { text } = this.state;\n        if(event.key === 'Enter' && !!text) {\n            this.onAccept(item);\n        }\n    }\n    render() {\n        const { items, order } = this.props,\n            { editId, text } = this.state,\n            { onCheckChange, onChangeText, handleKeyPress, onAccept, onCancel, onRemove, onEdit } = this;\n\n        return (\n            <div className=\"task-list\">\n                {!(items && items.length) ?\n                    <label>Tasks not found</label> : ''\n                }\n                {items ? items.sort(sort.bind(null, order)).map((item) => (\n                    <div className={!item.complited ? 'alert alert-primary' : 'alert alert-success'} role=\"alert\" key={item.id}>\n                        <h5 className='alert-heading'>\n                            { !item.complited ? \n                                <input type=\"checkbox\" \n                                    className=\"form-check-input\" \n                                    title=\"Set complited\"\n                                    onChange={onCheckChange.bind(null, item)} \n                                    checked={!!item.complited}/> : ''\n                            }\n                        \n                            <span>{item.title}</span>\n                        </h5>\n                        {editId === item.id ?\n                            <div className=\"input-group\">\n                                <input type=\"text\" \n                                    className=\"form-control\" \n                                    placeholder=\"Recipient's username\" \n                                    aria-label=\"Recipient's username\" \n                                    aria-describedby=\"basic-addon2\" \n                                    onChange={onChangeText}\n                                    onKeyPress={handleKeyPress.bind(null, item)}\n                                    value={text}/>\n                                <div className=\"input-group-append\">\n                                    <button className=\"btn btn-outline-secondary\" \n                                        type=\"button\"\n                                        disabled={!text}\n                                        onClick={onAccept.bind(null, item)}>Change</button>\n                                    <button className=\"btn btn-outline-secondary\" \n                                        type=\"button\"\n                                        onClick={onCancel}>Cancel</button>\n                                </div>\n                            </div>\n                            : <span className=\"task-text\">item.text</span>\n                        }\n                        <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={onRemove.bind(null, item)}>\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                        {editId !== item.id && !item.complited ?\n                            <button type=\"button\" className=\"edit\" onClick={onEdit.bind(null, item)}>\n                                edit\n                            </button>   : ''\n                        }\n                    </div>\n                )) : ''}\n            </div>            \n        );\n    }\n}\n\nexport default List;\n","export default {\n    STORAGE_KEY: 'toDoItems'\n};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport actions from '../storage/actions';\n\nimport NewUser from './new/new';\nimport List from './list/list';\nimport config from '../storage/config'\n\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { \n            showNewUser: false  \n        };\n\n        let savedObject = localStorage.getItem(config.STORAGE_KEY);\n\n        this.props.loadTasks(JSON.parse(savedObject));\n    }\n    toggleOrder = (event) => {\n        const { changeOrder } = this.props;\n        event.preventDefault();\n        changeOrder();\n    }\n    show = (event) => {\n        event.preventDefault();\n        this.setState({ showNewUser: true });\n    }\n    accept = (task) => {\n        const { addTask} = this.props;\n        addTask(task);\n        this.setState({ showNewUser: false });\n    }\n    cancel = () => {\n        this.setState({ showNewUser: false });\n    }\n    update = (task) => {\n        const { updateTask } = this.props;\n        updateTask(task.id, task);\n    }\n    remove = (task) => {\n        const { removeTask } = this.props;\n        removeTask(task.id);\n    }\n    render() {\n        const { taskList, order} = this.props,\n            { showNewUser } = this.state,\n            { toggleOrder, show, accept, cancel, update, remove } = this;\n\n          return (\n              <div className=\"App\">\n                  <header className=\"App-header\">\n                      <h1>To Do application</h1> \n                      <nav>\n                        <button type=\"button\" \n                            className=\"btn btn-outline-success\" \n                            title=\"Add task\"\n                            onClick={show}>+</button>\n                        <button type=\"button\" \n                            className=\"btn btn-outline-light\" \n                            disabled={!(taskList && taskList.length)}\n                            title=\"Sort tasks\"\n                            onClick={toggleOrder}>Sort</button>\n                      </nav>\n                  </header>\n                  <div className=\"App-body\">\n                        { showNewUser &&\n                            <NewUser accept={accept} cancel={cancel}></NewUser>          \n                        }\n                        <List items={taskList} order={order} update={update} remove={remove}></List>\n                  </div>\n              </div>\n          );\n    }\n}\n\nexport default connect(actions.stateToProps, actions.actionsToProps)(App);\n","const initialState = {\n    taskList: [],\n    order: 'desc'\n};\n\nexport default initialState;","import types from './types';\nimport config from './config'\n\nfunction getIndex(taskList, id) {\n    return taskList.findIndex((v) => v.id === id);\n}\n\nfunction updateStorage(data) {\n    localStorage.setItem(config.STORAGE_KEY, JSON.stringify(data));\n}\n\nconst rootReducer = (state, action) => {\n    const { taskList, order } = state;\n    let index = -1;\n\n    switch (action.type) {\n        case types.ACTION_CHANGE_ORDER:\n            return { ...state, order: order === 'asc' ? 'desc' : 'asc' };\n        case types.ACTION_ADD_TASK:\n            action.payload.id = window.btoa(JSON.stringify(action.payload) + (new Date().valueOf()));\n            \n            let list = [...taskList, action.payload];\n            \n            updateStorage(list);\n\n            return { ...state, taskList: list };\n        case types.ACTION_UPDATE_TASK:\n            const { id, task } = action.payload;\n            \n            index = getIndex(taskList, id);\n\n            if (index > -1) {\n                let list = [...taskList.slice(0, index), task, ...taskList.slice(index + 1)];\n\n                updateStorage(list);\n\n                return { ...state, taskList: list };\n            } else {\n                return state;\n            }\n        case types.ACTION_REMOVE_TASK:\n            index = getIndex(taskList, action.payload);\n\n            if (index > -1) {\n                let list = [...taskList.slice(0, index), ...taskList.slice(index + 1)];\n\n                updateStorage(list);\n\n                return { ...state, taskList: [...taskList.slice(0, index), ...taskList.slice(index + 1)] };\n            } else {\n                return state;\n            }\n        case types.ACTION_LOAD_TASKS:\n            return { ...state, taskList: (action.payload || taskList)}\n        default: \n            return state;\n    }\n};\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport 'bootstrap';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './components/App';\nimport initialState from './storage/initial';\nimport rootReducer from './storage/reducer';\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst store = createStore(rootReducer, initialState);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}